CREATE TABLE User (
    id INT NOT NULL AUTO_INCREMENT,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    phone VARCHAR(100),
    score FLOAT(10),
    isModerator BOOLEAN DEFAULT FALSE,
    isBanned BOOLEAN DEFAULT FALSE,
    PRIMARY KEY(id)
);

CREATE TABLE Bug (
    id INT NOT NULL AUTO_INCREMENT,
    authorId INT NOT NULL,
    title VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    creationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    imageURL VARCHAR(150),
    status ENUM('SOLVED', 'NOT SOLVED') NOT NULL DEFAULT 'NOT SOLVED',
    voteCount INT DEFAULT 0,
    PRIMARY KEY(id),
    FOREIGN KEY(authorId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE Comment (
    id INT NOT NULL AUTO_INCREMENT,
    bugId INT NOT NULL,
    authorId INT NOT NULL,
    text VARCHAR(255) NOT NULL,
    creationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    imageURL VARCHAR(200),
    voteCount INT DEFAULT 0,
    PRIMARY KEY(id),
    FOREIGN KEY(bugId) REFERENCES Bug(id) ON DELETE CASCADE,
    FOREIGN KEY(authorId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE Vote (
    id INT NOT NULL AUTO_INCREMENT,
    userId INT NOT NULL,
    targetId INT NOT NULL,
    voteType ENUM('UPVOTE', 'DOWNVOTE') NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY(userId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE Tag (
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(100) UNIQUE NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE BugTag (
    bugId INT NOT NULL,
    tagId INT NOT NULL,
    PRIMARY KEY (bugId, tagId),
    FOREIGN KEY (bugId) REFERENCES Bug(id) ON DELETE CASCADE,
    FOREIGN KEY (tagId) REFERENCES Tag(id) ON DELETE CASCADE
);

