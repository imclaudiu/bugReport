CREATE TABLE Users (id BIGSERIAL NOT NULL ,username VARCHAR(100) NOT NULL,email VARCHAR(100) NOT NULL UNIQUE,password VARCHAR(100) NOT NULL,phone VARCHAR(100),score FLOAT(10),isModerator BOOLEAN DEFAULT FALSE,isBanned BOOLEAN DEFAULT FALSE,PRIMARY KEY(id));

CREATE TABLE Bug (id INT NOT NULL,authorId INT NOT NULL,title VARCHAR(100) NOT NULL, description TEXT NOT NULL, creationDate DATE DEFAULT CURRENT_TIMESTAMP,imageURL VARCHAR(150), status varchar(10) check(status in ('SOLVED', 'NOT SOLVED')) NOT NULL DEFAULT 'NOT SOLVED', voteCount INT DEFAULT 0, PRIMARY KEY(id),FOREIGN KEY(authorId) REFERENCES Users(id) ON DELETE CASCADE);

CREATE TABLE Comment (id INT NOT NULL, bugId INT NOT NULL,authorId INT NOT NULL, text VARCHAR(255) NOT NULL, creationDate DATE DEFAULT CURRENT_TIMESTAMP, imageURL VARCHAR(200),voteCount INT DEFAULT 0,PRIMARY KEY(id),FOREIGN KEY(bugId) REFERENCES Bug(id) ON DELETE CASCADE,FOREIGN KEY(authorId) REFERENCES Users(id) ON DELETE CASCADE);

CREATE TABLE Vote ( id INT NOT NULL, userId INT NOT NULL,targetId INT NOT NULL,voteType varchar(50) check(voteType in ('UPVOTE', 'DOWNVOTE')) NOT NULL,PRIMARY KEY(id),FOREIGN KEY(userId) REFERENCES Users(id) ON DELETE CASCADE);

CREATE TABLE Tag (id INT NOT NULL, name VARCHAR(100) UNIQUE NOT NULL, PRIMARY KEY(id));

CREATE TABLE BugTag ( bugId INT NOT NULL,tagId INT NOT NULL, PRIMARY KEY (bugId, tagId), FOREIGN KEY (bugId) REFERENCES Bug(id) ON DELETE CASCADE, FOREIGN KEY (tagId) REFERENCES Tag(id) ON DELETE CASCADE);

